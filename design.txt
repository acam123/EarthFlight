This game is based in javascript which google earth is made to be morphed by as 
js is a client side language and ge is a plug-in the user must download.
Much of the framework was taken from pset8 and therefore not our design decisions.
We liked very much of how pset8 had been organized and designed and simply wanted
to build upon those good ideas. Most of our coding was tricky to figure out as we 
were working within so much predetermined framework instead of a blank canvas. It 
was a lot of research and trial and error to figure out pset8's odds and ends 
(what we needed and what we could gut), and google earth's and google maps's 
developement possibilities and syntax.
  
The major design decisions we made were as follows:

    The plane model:
        The whole project started with the knowledge that google sketchup models
        could be loaded into our google earth program. After much research we were
        able to put the plane into the game through the populate function of pset8
        and get it to move by updating it's location whenever the key stroke that 
        changed the shuttle location was heard. However this made for really choppy
        and we turned away ffrom this idea and started looking at having a plane
        overlay instead. Eventually (after the creation of the hoop removal function)
        we realized that making a move_plane function and calling it in the frameend
        would allow for "smooth sailing [flight]" as the calculations weren't getting
        bogged down on keystrokes. Now that we figured out how to change the location 
        of the plane we simply had to add a feature where the plane would follow you
        as you turn the camera. There turned out to be another treasure in the shuttle
        variable. Not only was there shuttle: .lat, .lng, .alt, but also .headingAngle
        which when you multipy by 180 and divide by PI (converting from 2x radians 
        to degrees) gives you the perfect variable to update orientation by. To make the
        plane appear and look nice we fudged the angle (as it renders the plane 
        degrees to the right of the camera) and the lat and lng a bit (for better 
        perspective). NOTE: we updated the headingAngle variable to not exceed 0 or 360.
    The plane overlay:
        This was our simple unmoving fix to the original plane model problem. And once 
        we figured out how to correct it, became a bonus feature. I had to cut out the 
        bits of overlay that you don't see and the slight transparancy is I believe a 
        happy accident from not setting the transparency.
    Hoops:
        The hoops were made in sketch up and exported as collada .dae files (just like the
        plane model). They were generated by poopulate calling a function very similar to the
        passengers rendering of pset8 (just altered for a model and not an icon and incorporating
        heading and location and orientation features in the HOOPS variable file (still passengers.js)). 
        Then to delete the hoops we used pick_up and changed it to look for the hoops.
    Layout & Features:
        We made the whole screen the game as the chart was no longer needed and plopped the map and start
        button in nice locations in the plane overlay (it only looks good when in full screen though). We
        made a bright title on the top as well. These features were added in using z-list numbers to put them
        on different overlapping planes. We also added music, as any good game should, that's fun, suspensful, 
        and royalty free.
    
